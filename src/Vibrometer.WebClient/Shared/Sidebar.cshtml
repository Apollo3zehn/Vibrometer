@inject AppState state
@inject SignalRService signalR

@using Vibrometer.WebClient.Model

<div class="sidebar" data-color="azure" data-background-color="black" data-image="./img/sidebar-1.jpg">

    <div class="logo">
        <a class="simple-text logo-mini">

        </a>

        <a class="simple-text logo-normal" href="/">
            Vibrometer
        </a>
    </div>

    <div class="sidebar-wrapper">
        <ul class="nav">
            @foreach (var pageDescription in state.PageDescriptionSet)
            {
                <NavItem PageDescription="pageDescription" />
            }
        </ul>
        <div class="d-flex justify-content-between" style="position:absolute;bottom:0px">
            <div class="fileinput text-center mx-1" data-provides="fileinput">
                <span class="btn btn-raised btn-round btn-outline-info btn-file">
                    <i class="material-icons text_align-center visible-on-sidebar-regular">cloud_upload</i>
                    <span class="fileinput-new ml-1">Load</span>
                    <input type="file" onchange="@UploadVibFile" id="vibFileUpload" accept=".vib.json" />
                </span>
            </div>
            <div class="fileinput text-center mx-1" data-provides="fileinput">
                <span class="btn btn-raised btn-round btn-outline-info btn-file" onclick="@this.DownloadVibFile">
                    <i class="material-icons text_align-center visible-on-sidebar-regular">cloud_download</i>
                    <span class="fileinput-new ml-1">Save</span>
                </span>
            </div>
        </div>
    </div>
</div>

@functions
{
    private async void UploadVibFile(UIChangeEventArgs e)
    {
        VibrometerState vibrometerState;

        try
        {
            vibrometerState = await JSRuntime.Current.InvokeAsync<VibrometerState>("Vibrometer.ReadFile", "vibFileUpload", false);
            await signalR.Connection.InvokeAsync("ApplyConfiguration", vibrometerState);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void DownloadVibFile()
    {
        JSRuntime.Current.InvokeAsync<VibrometerState>("Vibrometer.WriteVibFile", state.VibrometerState);
    }
}