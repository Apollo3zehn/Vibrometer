@inject AppStateViewModel state
@inject SignalRService signalR

@using Vibrometer.WebClient.Model

<div class="sidebar" data-color="azure" data-background-color="black" data-image="./img/sidebar.jpg">

    <div class="logo">
        <a class="simple-text logo-mini">

        </a>

        <a class="simple-text logo-normal">
            Vibrometer
        </a>
    </div>

    <div class="sidebar-wrapper">
        <ul class="nav">
            @foreach (var pageDescription in state.PageDescriptionSet)
            {
                <NavItem PageDescription="pageDescription" />
            }
        </ul>
        <div class="d-flex justify-content-between" style="position:absolute;bottom:0px">
            <div class="fileinput text-center mx-1">
                <span class="btn btn-raised btn-round btn-outline-info btn-file @((!state.IsConnected || !state.IsBitstreamLoaded) ? "disabled" : "")">
                    <i class="material-icons text_align-center visible-on-sidebar-regular">cloud_upload</i>
                    <span class="fileinput-new ml-1">Load</span>
                    <input type="file" onchange="@UploadVibFile" id="vibFileUpload" accept=".vib.json" />
                </span>
            </div>
            <div class="text-center mx-1">
                <span class="btn btn-raised btn-round btn-outline-info btn-file" onclick="@this.DownloadVibFile">
                    <i class="material-icons text_align-center visible-on-sidebar-regular">cloud_download</i>
                    <span class="fileinput-new ml-1">Save</span>
                </span>
            </div>
        </div>
        <div class="d-flex" style="white-space: nowrap;position:absolute;bottom:30%">
            <h6 style="transform:rotate(-90deg);transform-origin: left top 0;"><small>© www.creative-tim.com / © ESO/Y. Beletsky</small></h6>
        </div>
    </div>
</div>

@functions
{      
    protected override void OnInit()
    {
        state.PropertyChanged += (sender, e) =>
        {
            if (e.PropertyName == nameof(state.IsConnected) || e.PropertyName == nameof(state.IsBitstreamLoaded))
            {
                this.StateHasChanged();
            }
        };

        base.OnInit();
    }

    private async void UploadVibFile(UIChangeEventArgs e)
    {
        try
        {
            state.Model = await JSRuntime.Current.InvokeAsync<AppState>("Vibrometer.ReadFile", "vibFileUpload", false);
            await signalR.Connection.InvokeAsync("ApplyConfiguration", state.FpgaSettings);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void DownloadVibFile()
    {
        JSRuntime.Current.InvokeAsync<AppState>("Vibrometer.WriteVibFile", state.Model);
    }
}