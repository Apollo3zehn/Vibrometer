@page "/settings"
@inject AppStateViewModel state
@inject SignalRService signalR
@implements IDisposable

@using System.ComponentModel
@using System.Globalization

<h1 class="display-4">FPGA Settings</h1>

<div class="row">
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header card-header-tabs card-header-info">
                <div class="nav-tabs-navigation">
                    <div class="nav-tabs-wrapper">
                        <ul class="nav nav-tabs" data-tabs="tabs">
                            <li class="nav-item">
                                <a class="nav-link @((this.SelectedGroup == SettingsGroup.ADC_DAC ? "active" : ""))" style="cursor:pointer" onclick="@(() => SelectGroup(SettingsGroup.ADC_DAC))">
                                    <i class="material-icons">graphic_eq</i> ADC / DAC
                                    <div class="ripple-container"></div>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @((this.SelectedGroup == SettingsGroup.Processing ? "active" : ""))" style="cursor:pointer" onclick="@(() => SelectGroup(SettingsGroup.Processing))">
                                    <i class="material-icons">memory</i> Processing
                                    <div class="ripple-container"></div>
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @((this.SelectedGroup == SettingsGroup.System ? "active" : ""))" style="cursor:pointer" onclick="@(() => SelectGroup(SettingsGroup.System))">
                                    <i class="material-icons">settings</i> System
                                    <div class="ripple-container"></div>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane active">
                        <div class="list-group">
                            @switch (this.SelectedGroup)
                            {
                                case SettingsGroup.ADC_DAC:

                                    <!--DAC-->
                                    <ApiRecordHeader DisplayName="Digital-Analog-Converter"
                                                     Description="The DAC is used to generate test signals. In default operating mode, this component is driven by a DDS compiler that generates a sine (channel A) and a cosine (channel B). With frequency modulation mode these signals are modulated with an additional signal." />
                                    <ApiRecordComponentBool Record="ApiInfo.Instance[ApiParameter.SG_FmEnabled]"
                                                            Value="@state.FpgaSettings.SG_FmEnabled"
                                                            OnValueChanged="@OnValueChangedBool" />
                                    @if (state.FpgaSettings.SG_FmEnabled)
                                    {
                                        <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.SG_ShiftCarrier]"
                                                            Value="@state.FpgaSettings.SG_ShiftCarrier"
                                                            OnValueChanged="@OnValueChanged" />
                                        <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.SG_PhaseSignal]"
                                                            Value="@state.FpgaSettings.SG_PhaseSignal"
                                                            OnValueChanged="@OnValueChanged" />
                                    }
                                    else
                                    {
                                        <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.SG_PhaseCarrier]"
                                                            Value="@state.FpgaSettings.SG_PhaseCarrier"
                                                            OnValueChanged="@OnValueChanged" />
                                    }

                                    <!--ADC-->
                                    <ApiRecordHeader DisplayName="Analog-Digital-Converter"
                                                     Description="The ADC is the main data source of the vibrometer. It is driven by an 125 MHz oscillator and consists of the two 14-bit channels A and B." />
                                    <ApiRecordComponentBool Record="ApiInfo.Instance[ApiParameter.DA_SwitchEnabled]"
                                                            Value="@state.FpgaSettings.DA_SwitchEnabled"
                                                            OnValueChanged="@OnValueChangedBool" />

                                    break;

                                case SettingsGroup.Processing:

                                    <!--Position Tracker-->
                                    <ApiRecordHeader DisplayName="Position Tracker"
                                                     Description="The position tracker module receives its input data from the ADC. It consists of an 'extremum finder' that constantly monitors the signal levels and the position tracker itself which is simply counting the signal waves. If the input signal of channel B is shifted by 90 deg it is also capable to distinguish different directions." />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.PT_LogScale]"
                                                        Value="@state.FpgaSettings.PT_LogScale"
                                                        OnValueChanged="@OnValueChanged" />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.PT_LogCountExtremum]"
                                                        Value="@state.FpgaSettings.PT_LogCountExtremum"
                                                        OnValueChanged="@OnValueChanged" />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.PT_ShiftExtremum]"
                                                        Value="@state.FpgaSettings.PT_ShiftExtremum"
                                                        OnValueChanged="@OnValueChanged" />

                                    <!--Filter-->

                                    <!--TODO: The purpose of this module is to apply a high pass filter to avoid variable overflow and ...-->
                                    <ApiRecordHeader DisplayName="Filter"
                                                     Description="This module consists of an differentiator that is required if signal B is not shifted by 90 deg to determine the count direction." />
                                    <ApiRecordComponentBool Record="ApiInfo.Instance[ApiParameter.FI_Enabled]"
                                                            Value="@state.FpgaSettings.FI_Enabled"
                                                            OnValueChanged="@OnValueChangedBool" />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.FI_LogThrottle]"
                                                        Value="@state.FpgaSettings.FI_LogThrottle"
                                                        OnValueChanged="@OnValueChanged" />

                                    <!--Fourier Transform-->
                                    <ApiRecordHeader DisplayName="Fourier Transform"
                                                     Description="Every 265 data points, a Fourier transform is calculated and averaged. The resulting dataset is pushed regularly to the RAM writer module." />
                                    <ApiRecordComponentBool Record="ApiInfo.Instance[ApiParameter.FT_Enabled]"
                                                            Value="@state.FpgaSettings.FT_Enabled"
                                                            OnValueChanged="@OnValueChangedBool" />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.FT_LogCountAverages]"
                                                        Value="@state.FpgaSettings.FT_LogCountAverages"
                                                        OnValueChanged="@OnValueChanged" />

                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.FT_LogThrottle]"
                                                        Value="@state.FpgaSettings.FT_LogThrottle"
                                                        OnValueChanged="@OnValueChanged" />

                                    break;

                                case SettingsGroup.System:

                                    <!--Bitstream-->
                                    <ApiRecordHeader DisplayName="Bitstream"
                                                     Description="The bitstream must be loaded to the FGPA before any data access occurs, otherwise the system might freeze." />

                                    <div class="row">
                                        <div class="col d-flex justify-content-center">
                                            <div class="fileinput text-center mx-1" data-provides="fileinput">
                                                <span class="btn btn-raised btn-round btn-info btn-file">
                                                    <i class="material-icons text_align-center visible-on-sidebar-regular">cloud_upload</i>
                                                    <span class="fileinput-new ml-1">Load bitstream</span>
                                                    <input type="file" onchange="@UploadBitstream" id="bitstreamUpload" accept=".bit" />
                                                </span>
                                            </div>
                                        </div>
                                    </div>

                                    <!--AXIS Switch-->
                                    <ApiRecordHeader DisplayName="AXIS Switch"
                                                     Description="The AXIS switch allows the data streams of the ADC, position tracker, filter and Fourier Transform to be written into the RAM." />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.AS_Source]"
                                                        Value="@state.FpgaSettings.AS_Source"
                                                        OnValueChanged="@OnValueChanged" />

                                    <!--RAM Writer-->
                                    <ApiRecordHeader DisplayName="RAM Writer"
                                                     Description="The RAM writer consists of a sync manager module and the RAM writer itself. The sync manager handles the buffer management to ensure there is always a buffer for reading and for writing available." />
                                    <ApiRecordComponentBool Record="ApiInfo.Instance[ApiParameter.RW_Enabled]"
                                                            Value="@state.FpgaSettings.RW_Enabled"
                                                            OnValueChanged="@OnValueChangedBool" />
                                    <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.RW_LogLength]"
                                                        Value="@state.FpgaSettings.RW_LogLength"
                                                        OnValueChanged="@OnValueChanged" />

                                    @if ((ApiSource)state.FpgaSettings.AS_Source != ApiSource.FourierTransform)
                                    {
                                        <ApiRecordComponent Record="ApiInfo.Instance[ApiParameter.RW_LogThrottle]"
                                                            Value="@state.FpgaSettings.RW_LogThrottle"
                                                            OnValueChanged="@OnValueChanged" />
                                    }

                                    break;

                                default:
                                    break;
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header card-header-tabs card-header-info">
                <div class="nav-tabs-navigation">
                    <div class="nav-tabs-wrapper">
                        <ul class="nav nav-tabs" data-tabs="tabs">
                            <li class="nav-item">
                                <a class="nav-link active" style="cursor:pointer">
                                    <i class="material-icons">polymer</i> Summary
                                    <div class="ripple-container"></div>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane active">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th><strong>Name</strong></th>
                                    <th><strong>Value</strong></th>
                                    <th><strong>Unit</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Signal Generator Carrier Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.SG_CarrierFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>Signal Generator Signal Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.SG_SignalFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>Base Sampling Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.BaseSamplingFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>Position Tracker Extremum Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.PT_ExtremumFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>Filter Sampling Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.FI_SamplingFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>Fourier Transform Sampling Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.FT_SamplingFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>Fourier Transform Frequency Resolution</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.FT_FrequencyResolution)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>RAM Writer Sampling Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.RW_SamplingFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                                <tr>
                                    <td>RAM Writer Buffer Frequency</td>
                                    <td>@String.Format(this.NFI, "{0:n}", state.Summary.RW_BufferFrequency)</td>
                                    <td>Hz</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions
{
    private bool _suspend;
    private SettingsGroup SelectedGroup { get; set; }
    private NumberFormatInfo NFI { get; set; }
    private PropertyChangedEventHandler StateChangedHandler;

    protected override void OnInit()
    {
        _suspend = false;

        this.NFI = new NumberFormatInfo()
        {
            NumberDecimalSeparator = ",",
            NumberGroupSeparator = ".",
            NumberDecimalDigits = 2
        };

        this.SelectedGroup = SettingsGroup.ADC_DAC;

        this.StateChangedHandler = (sender, e) =>
        {
            if (e.PropertyName == nameof(state.FpgaSettings))
            {
                _suspend = true;
                base.StateHasChanged();
                _suspend = false;
            }
        };

        state.PropertyChanged += this.StateChangedHandler;
    }

    private void SelectGroup(SettingsGroup group)
    {
        this.SelectedGroup = group;
    }

    private async void UploadBitstream()
    {
        string bitstreamBase64;

        try
        {
            bitstreamBase64 = await JSRuntime.Current.InvokeAsync<string>("Vibrometer.ReadFile", "bitstreamUpload", true);
            await signalR.Connection.InvokeAsync("LoadBitstream", bitstreamBase64);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void OnValueChanged(ApiParameter parameter, int value)
    {
        if (!_suspend)
        {
            await signalR.Connection.InvokeAsync("UpdateSetting", parameter.ToString(), value);
        }
    }

    private async void OnValueChangedBool(ApiParameter parameter, bool value)
    {
        if (!_suspend)
        {
            await signalR.Connection.InvokeAsync("UpdateSettingBool", parameter.ToString(), value);
        }
    }

    public void Dispose()
    {
        state.PropertyChanged -= this.StateChangedHandler;
    }
}
