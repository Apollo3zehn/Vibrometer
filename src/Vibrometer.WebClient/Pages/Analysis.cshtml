@page "/analysis"
@inject AppState state
@implements IDisposable

@using Vibrometer.BaseTypes.API
@using Vibrometer.WebClient.Model
@using System.ComponentModel

<h1 class="display-4">Analysis</h1>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header card-header-tabs card-header-info">
                <div class="nav-tabs-navigation">
                    <div class="nav-tabs-wrapper">
                        <ul class="nav nav-tabs" data-tabs="tabs">
                            <li class="nav-item">
                                <a class="nav-link active" style="cursor:pointer">
                                    <i class="material-icons">show_chart</i> Chart
                                    <div class="ripple-container"></div>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane active">
                        <canvas height="130" id="chart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4">

    </div>
</div>

@functions
{
    private PropertyChangedEventHandler handler;

    protected override void OnInit()
    {
        handler = async (sender, e) =>
        {
            if (e.PropertyName == nameof(state.BufferContent))
            {
                switch ((ApiSource)state.VibrometerState.AS_Source)
                {
                    case ApiSource.NoSource:
                    case ApiSource.Raw:
                    case ApiSource.Position:
                    case ApiSource.Filter:

                        var data1 = state.BufferContent.Select((value, i) => new { x = i + 1, y = value }).ToList();
                        await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.UpdateChart", "chart", data1);
                        break;

                    case ApiSource.FourierTransform:

                        var real = state.BufferContent.Select(value => (unchecked((uint)value) & 0xFFFF0000)).ToArray();
                        var imag = state.BufferContent.Select(value => (unchecked((uint)value) >> 16)).ToArray();
                        var ampl = real.Zip(imag, (x, y) => Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2)));
                        var count = ampl.Count();

                        var data2 = ampl.Select((value, i) => new { x = state.Summary.FT_SamplingFrequency * i / count, y = value }).ToList();
                        await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.UpdateChart", "chart", data2);

                        break;

                    default:
                        throw new ArgumentException();
                }
            }
            else if (e.PropertyName == nameof(state.VibrometerState))
            {
                await this.InitializeChart();
            }
        };

        state.PropertyChanged += handler;
    }

    protected override async Task OnAfterRenderAsync()
    {
        await this.InitializeChart();
    }

    private async Task InitializeChart()
    {
        switch ((ApiSource)state.VibrometerState.AS_Source)
        {
            case ApiSource.NoSource:
                await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.InitializeChart", "chart", "no data source selected", 1, Math.Pow(2, state.VibrometerState.RW_LogLength), "-", 0, 1, "-");
                break;
            case ApiSource.Raw:
                await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.InitializeChart", "chart", "RAW data", 1, Math.Pow(2, state.VibrometerState.RW_LogLength), "time", -32768, 32768, "raw");
                break;
            case ApiSource.Position:
                await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.InitializeChart", "chart", "Position data", 1, Math.Pow(2, state.VibrometerState.RW_LogLength), "time", -32768, 32768, "position");
                break;
            case ApiSource.Filter:
                await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.InitializeChart", "chart", "Filter data", 1, Math.Pow(2, state.VibrometerState.RW_LogLength), "time", -32768, 32768, "filtered position");
                break;
            case ApiSource.FourierTransform:
                await JSRuntime.Current.InvokeAsync<bool>("Vibrometer.InitializeChart", "chart", "Spectrum", 0, state.Summary.FT_SamplingFrequency, "frequency in Hz", -32768, 32768, "amplitude");
                break;
            default:
                break;
        }
    }

    public void Dispose()
    {
        state.PropertyChanged -= handler;
    }
}
