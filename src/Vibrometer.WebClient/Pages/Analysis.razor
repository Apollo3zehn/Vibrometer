@page "/analysis"
@inject AppStateViewModel state
@inject HubConnection HubConnection
@inject IJSRuntime  jsRuntime
@implements IDisposable

@using System.ComponentModel
@using Microsoft.AspNetCore.SignalR.Client

<h1 class="display-4">Analysis</h1>

<div class="row">
    <div class="col-lg-7">
        <div class="card">
            <div class="card-header card-header-tabs card-header-info">
                <div class="nav-tabs-navigation">
                    <div class="nav-tabs-wrapper">
                        <ul class="nav nav-tabs w-100" data-tabs="tabs">
                            @foreach (ApiSource source in Enum.GetValues(typeof(ApiSource)).Cast<ApiSource>().Skip(1))
                            {
                                <li class="nav-item" @onclick="() => this.SelectSource(source)">
                                    <a class="nav-link @((ApiSource)state.FpgaSettings.AS_Source == source ? "active" : "")" style="cursor:pointer">
                                        <i class="material-icons">show_chart</i> @state.ChartSettingsMap[source].Title
                                    </a>
                                </li>
                            }
                            <li class="nav-item ml-auto">
                                <a class="nav-link" style="cursor:pointer">
                                    <i class="material-icons" @onclick="this.ToggleRun">@(this.Run ? "pause_circle_filled" : "play_arrow")</i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane active">
                        @if ((ApiSource)state.FpgaSettings.AS_Source == ApiSource.NoSource)
                        {
                            <div class="alert alert-info mx-auto" style="max-width:400px;margin-top:170px;margin-bottom:170px;">
                                <span>
                                    <b>Info - </b> No data source selected. Click on one of the headers or load a configuration file.
                                </span>
                            </div>
                        }
                        <canvas height="130" id="chart" style="@((ApiSource)state.FpgaSettings.AS_Source == ApiSource.NoSource ? "display : none" : string.Empty)"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-5">
        @if ((ApiSource)state.FpgaSettings.AS_Source > ApiSource.NoSource)
        {
            <div class="card">
                <div class="card-header card-header-tabs card-header-info">
                    <div class="nav-tabs-navigation">
                        <div class="nav-tabs-wrapper">
                            <ul class="nav nav-tabs" data-tabs="tabs">
                                <li class="nav-item">
                                    <a class="nav-link active" style="cursor:pointer">
                                        <i class="material-icons">settings</i> Toolbox
                                        <div class="ripple-container"></div>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="tab-content">
                        <div class="tab-pane active">
                            <div class="row mt-2">
                                <div class="col">
                                    <h5 style="margin-bottom:0px">Y-Axes Limits</h5>
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col">
                                    <div class="form-group bmd-form-group mt-3">
                                        <label>Select of the following options to fit your needs.</label>
                                        <div class="d-flex justify-content-between mt-2">
                                            @foreach (ChartLimitMode limitMode in Enum.GetValues(typeof(ChartLimitMode)))
                                            {
                                                <label class="form-check-label">
                                                    <input type="radio"
                                                           checked="@(this.ChartSettings.LimitMode == limitMode)"
                                                           @onclick="() => this.ChartSettings.LimitMode = limitMode" />
                                                    @Utilities.GetEnumLocalization((ChartLimitMode)limitMode, typeof(EnumerationDescription))
                                                </label>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @if (this.ChartSettings.LimitMode == ChartLimitMode.Custom)
                            {
                                <hr />
                                <div class="input-group mt-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">Min:</span>
                                    </div>
                                    <input type="text" class="form-control mr-2" placeholder="Lower limit ..." @bind="this.ChartSettings.YMin" />
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">Max:</span>
                                    </div>
                                    <input type="text" class="form-control" placeholder="Upper limit ..." @bind="this.ChartSettings.YMax" />
                                    <button type="button" class="btn btn-outline-secondary btn-sm ml-4"
                                            @onclick="this.ChartSettings.Reset">
                                        Reset
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>           
        }
    </div>
</div>

@functions
{
    private bool _initialized;

    private bool Run { get; set; }
    private PropertyChangedEventHandler StateChangedHandler { get; set; }

    private ChartSettingsViewModel ChartSettings
    {
        get
        {
            return state.ChartSettingsMap[(ApiSource)state.FpgaSettings.AS_Source];
        }
    }

    protected override void OnInitialized()
    {
        _initialized = false;

        this.StateChangedHandler = async (sender, e) =>
        {
            List<ChartPoint> data1;
            List<ChartPoint> data2;

            if (e.PropertyName == nameof(state.FpgaData))
            {
                if (!this.Run)
                {
                    return;
                }

                data1 = null;
                data2 = null;
                var data = state.FpgaData.Buffer;

                switch ((ApiSource)state.FpgaSettings.AS_Source)
                {
                    case ApiSource.NoSource:
                        data1 = new List<ChartPoint>();
                        break;

                    case ApiSource.Raw:
                        data1 = data.Select((value, i) => new ChartPoint(i * state.Summary.Step, unchecked((short)(value & 0x0000FFFF)))).ToList();
                        data2 = data.Select((value, i) => new ChartPoint(i * state.Summary.Step, unchecked((short)(value >> 16)))).ToList();
                        break;

                    case ApiSource.Position:
                        data1 = data.Select((value, i) => new ChartPoint(i * state.Summary.Step, value)).ToList();
                        break;

                    case ApiSource.Filter:
                        data1 = data.Select((value, i) => new ChartPoint(i * state.Summary.Step, unchecked((short)(value & 0x0000FFFF)))).ToList();
                        break;

                    case ApiSource.FourierTransform:

                        var real = data.Select(value => unchecked((short)(value & 0x0000FFFF)));
                        var imag = data.Select(value => unchecked((short)(value >> 16)));
                        var ampl = real.Zip(imag, (x, y) => Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2)));
                        var ampl_fft_shift = ampl.Skip(SystemParameters.FFT_LENGTH / 2).Concat(ampl.Take(SystemParameters.FFT_LENGTH / 2));

                        data1 = ampl_fft_shift.Select((value, i) => new ChartPoint(i * state.Summary.Step + state.Summary.XMin, value)).ToList();
                        break;

                    default:
                        throw new ArgumentException();
                }

                if (data2 is null)
                    data2 = new List<ChartPoint>();

                await jsRuntime.InvokeVoidAsync("Vibrometer.UpdateChartData", "chart", data1, data2);
            }
            else if (e.PropertyName == nameof(state.FpgaSettings))
            {
                await this.InitializeChart();
                base.StateHasChanged();
            }
            else if (e.PropertyName == nameof(state.ChartSettingsMap))
            {
                await this.UpdateChartLimits();
                base.StateHasChanged();
            }
        };

        state.PropertyChanged += this.StateChangedHandler;

        this.Run = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            await this.InitializeChart();
            _initialized = true;
        }
    }

    private async Task InitializeChart()
    {
        string xLabel;

        switch ((ApiSource)state.FpgaSettings.AS_Source)
        {
            case ApiSource.NoSource:
                xLabel = string.Empty;
                break;
            case ApiSource.Raw:
                xLabel = $"time in {state.Summary.Unit}";
                break;
            case ApiSource.Position:
                xLabel = $"time in {state.Summary.Unit}";
                break;
            case ApiSource.Filter:
                xLabel = $"time in {state.Summary.Unit}";
                break;
            case ApiSource.FourierTransform:
                xLabel = $"frequency in {state.Summary.Unit}";
                break;
            default:
                throw new ArgumentException();
        }

        await jsRuntime.InvokeVoidAsync("Vibrometer.InitializeChart", "chart", state.Summary.XMin, state.Summary.XMax, xLabel, this.ChartSettings);
    }

    private async Task UpdateChartLimits()
    {
        await jsRuntime.InvokeVoidAsync("Vibrometer.UpdateChartLimits", "chart", this.ChartSettings);
    }

    private async void SelectSource(ApiSource source)
    {
        await HubConnection.InvokeAsync("UpdateSetting", ApiParameter.AS_Source.ToString(), (int)source);
    }

    private void ToggleRun()
    {
        this.Run = !this.Run;
    }

    public void Dispose()
    {
        state.PropertyChanged -= this.StateChangedHandler;
    }
}
